# comparing two strings
read -p "string 1:" str1
read -p "string 2:" str2

if [ "$str1" == "$str2"];then
    echo "The strings are same"
else
    echo "The strings are different"
fi
--------------------------------------------------------------------------------------------------------------------------------
#lower to upper case conversion
read -p "input string: " strvalue

lwer=$(echo "$strvalue" | tr '[:lower:]' '[:upper:]')
echo "$lwer"
-------------------------------------------------------------------------------------------------------------------------------
#upper to lower case conversion
read -p "input string: " strvalue
upr=$(echo "$strvalue" | tr '[:upper:]' '[:lower:]')
echo "$upr"
-------------------------------------------------------------------------------------------------------------------------------
#factorial of a number
read -p "Enter any positive number::" var1
factorial=1
if test $var1 -gt 0;then
    for((i=1; i<=var1; i++));do
        factorial=$((factorial * i))
    done
fi    
echo "factorial of $var1 is $factorial"
-----------------------------------------------------------------------------------------------------------
# System information
echo "System information $(hostname)"
echo "---------------------------------------------------------"
echo "Operation system and kernal version:"
uname -a
echo "--------------------------------------------------------"
echo "CPU Information:::"
lscpu | grep 'Model name'
lscpu | grep 'CPU MHz'
lscpu | grep 'Architecture'
echo "-----------------------------------------------------------"
echo "Network:::"
ip addr show
echo "------------------------------------"
echo "Disk usuage"
df -h
echo "-----------------------------------------------------------"
fcfs in c
#include <stdio.h>

int main() {
    int n, i, j;
    int burst_time[20], wait_time[20], turn_around_time[20];
    int total_wait = 0, total_turnaround = 0;
    
    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    // Input burst times for each process
    printf("Enter burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
    }
    
    // Calculate waiting time for each process
    wait_time[0] = 0; // The first process has no waiting time
    for (i = 1; i < n; i++) {
        wait_time[i] = 0;
        for (j = 0; j < i; j++) {
            wait_time[i] += burst_time[j];
        }
    }
    
    // Calculate turnaround time for each process
    for (i = 0; i < n; i++) {
        turn_around_time[i] = burst_time[i] + wait_time[i];
        total_wait += wait_time[i];
        total_turnaround += turn_around_time[i];
    }
    
    // Output results
    printf("\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("P[%d]\t\t%d\t\t%d\t\t%d\n", i + 1, burst_time[i], wait_time[i], turn_around_time[i]);
    }
    
    // Calculate and display average waiting time and turnaround time
    float avg_wait_time = (float)total_wait / n;
    float avg_turnaround_time = (float)total_turnaround / n;
    printf("\nAverage Waiting Time: %.2f", avg_wait_time);
    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);
    
    return 0;
}
------------------------------------------------------------------------------------------
sjf 
#include <stdio.h>

struct Process {
    int pid;       // Process ID
    int burst_time; // Burst Time
    int waiting_time; // Waiting Time
    int turnaround_time; // Turnaround Time
};

void findWaitingTime(struct Process proc[], int n) {
    proc[0].waiting_time = 0; // First process has 0 waiting time

    // Calculating waiting time for each process
    for (int i = 1; i < n; i++) {
        proc[i].waiting_time = proc[i - 1].waiting_time + proc[i - 1].burst_time;
    }
}

void findTurnaroundTime(struct Process proc[], int n) {
    // Turnaround time = burst time + waiting time
    for (int i = 0; i < n; i++) {
        proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
    }
}

void sortProcessesByBurstTime(struct Process proc[], int n) {
    // Sort processes based on burst time using simple bubble sort
    struct Process temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - 1 - i; j++) {
            if (proc[j].burst_time > proc[j + 1].burst_time) {
                temp = proc[j];
                proc[j] = proc[j + 1];
                proc[j + 1] = temp;
            }
        }
    }
}

void findAverageTime(struct Process proc[], int n) {
    findWaitingTime(proc, n);
    findTurnaroundTime(proc, n);

    int total_waiting_time = 0, total_turnaround_time = 0;

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        total_waiting_time += proc[i].waiting_time;
        total_turnaround_time += proc[i].turnaround_time;
        printf("%d\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burst_time, proc[i].waiting_time, proc[i].turnaround_time);
    }

    printf("\nAverage Waiting Time = %.2f", (float)total_waiting_time / n);
    printf("\nAverage Turnaround Time = %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n;
    
    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];

    for (int i = 0; i < n; i++) {
        printf("Enter burst time for process %d: ", i + 1);
        proc[i].pid = i + 1;
        scanf("%d", &proc[i].burst_time);
    }

    sortProcessesByBurstTime(proc, n); // Sort processes by burst time

    findAverageTime(proc, n); // Calculate and display average waiting time and turnaround time

    return 0;
}
-----------------------------------------------------------------------------------------
priority queue

#include <stdio.h>
#include <stdlib.h>

// Node structure for the priority queue
struct Node {
    int data;
    int priority;
    struct Node* next;
};

// Function to create a new node
struct Node* newNode(int data, int priority) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = data;
    temp->priority = priority;
    temp->next = NULL;
    return temp;
}

// Function to check if the queue is empty
int isEmpty(struct Node** head) {
    return (*head) == NULL;
}

// Function to insert a new node into the queue based on priority
void push(struct Node** head, int data, int priority) {
    struct Node* start = (*head);

    // Create new node
    struct Node* temp = newNode(data, priority);

    // Special case: if the head has lower priority or if the queue is empty
    if (isEmpty(head) || (*head)->priority > priority) {
        temp->next = *head;
        *head = temp;
    } else {
        // Traverse the list to find the position to insert the new node
        while (start->next != NULL && start->next->priority <= priority) {
            start = start->next;
        }
        temp->next = start->next;
        start->next = temp;
    }
}

// Function to remove the node with the highest priority (lowest priority number)
void pop(struct Node** head) {
    if (isEmpty(head)) {
        printf("Priority queue is empty.\n");
        return;
    }

    struct Node* temp = *head;
    *head = (*head)->next;
    free(temp);
}

// Function to get the data of the highest priority element
int peek(struct Node** head) {
    if (isEmpty(head)) {
        printf("Priority queue is empty.\n");
        return -1;
    }
    return (*head)->data;
}

// Function to print the priority queue
void printQueue(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("Data: %d | Priority: %d\n", temp->data, temp->priority);
        temp = temp->next;
    }
}

// Main function to test the priority queue
int main() {
    struct Node* pq = NULL; // Initialize an empty priority queue

    push(&pq, 10, 2); // Data 10, priority 2
    push(&pq, 14, 1); // Data 14, priority 1
    push(&pq, 16, 3); // Data 16, priority 3
    push(&pq, 12, 0); // Data 12, priority 0

    printf("Priority Queue:\n");
    printQueue(pq); // Print the queue

    printf("\nElement with highest priority: %d\n", peek(&pq)); // Print the top element

    pop(&pq); // Remove the highest priority element

    printf("\nPriority Queue after popping:\n");
    printQueue(pq); // Print the queue again

    return 0;
}
-----------------------------------------------------------------------------------------------------------------------

producer and consumer
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 5  // Buffer size

int buffer[BUFFER_SIZE];  // Shared buffer
int in = 0;  // Index for producer
int out = 0;  // Index for consumer

sem_t empty;  // Semaphore for empty slots
sem_t full;   // Semaphore for full slots

pthread_mutex_t mutex;  // Mutex for buffer access

// Producer thread
void* producer(void* arg) {
    while (1) {
        int item = rand() % 100;  // Produce item
        sem_wait(&empty);  // Wait for an empty slot
        pthread_mutex_lock(&mutex);  // Lock the buffer

        buffer[in] = item;  // Add item to buffer
        printf("Produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;  // Update producer index

        pthread_mutex_unlock(&mutex);  // Unlock buffer
        sem_post(&full);  // Signal a full slot
        sleep(1);  // Simulate delay
    }
}

// Consumer thread
void* consumer(void* arg) {
    while (1) {
        sem_wait(&full);  // Wait for a full slot
        pthread_mutex_lock(&mutex);  // Lock the buffer

        int item = buffer[out];  // Remove item from buffer
        printf("Consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;  // Update consumer index

        pthread_mutex_unlock(&mutex);  // Unlock buffer
        sem_post(&empty);  // Signal an empty slot
        sleep(2);  // Simulate delay
    }
}

int main() {
    pthread_t prod, cons;  // Producer and consumer threads

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE);  // Initially, buffer has BUFFER_SIZE empty slots
    sem_init(&full, 0, 0);  // Initially, buffer has 0 full slots
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // Wait for the threads (they run indefinitely in this example)
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    return 0;
}
--------------------------------------------------------------------------------------------------------------------

